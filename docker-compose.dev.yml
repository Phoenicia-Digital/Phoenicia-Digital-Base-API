# Create the list of services that will be used by docker-compose.dev
services:

  # Create the Postgresql Database Service For Development
  # 
  # IN CASE YOU DONT NEED A POSTGRESQL SERVICE COMMENT OUT THIS ENTIRE SERVICE! AND ITS DEPENDANCY `depends_on` IN go-backend
  phoenicia-digital-postgres:
    image: postgres:latest # Use the latest version of Postgresq
    container_name: ${PROJECT_NAME:-Phoenicia-Digital}-Postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER} # Use the POSTGRES_USER env variable from ./config/.env
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} # Use the POSTGRES_PASSWORD env variable from ./config/.env Defaults to an empty string ':-''
      - POSTGRES_DB=${POSTGRES_DB} # Use the POSTGRES_DB env variable from ./config/.env
    command: ["postgres", "-c", "port=${POSTGRES_PORT:-5432}"]
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432} # Map the port from the POSTGRES_PORT variable in the .env file to the containers 5432 Port POSTGRES_PORT defaults to 5432 ':-5432'
    volumes:
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql # Initialize the postgresql-database with init commands from ./sql/init.sql
      - Postgres-Data:/var/lib/postgresql/data # Defines a Named Volume Declared in Volumes
      - ./docker/.postgres/data:/var/lib/postgresql/data # Perists The Data From The Postgres Container -> ./docker/.postgres/data/
    networks:
      - Phoenicia-Digital-Backend-Network # Makes This Container Use An Isolated Network Bridge Communication For All the Container

  # Create the Mongodb Database Service Development
  # 
  # IN CASE YOU DONT NEED A Mongodb SERVICE COMMENT OUT THIS ENTIRE SERVICE! AND ITS DEPENDANCY `depends_on` IN go-backend
  phoenicia-digital-mongo:
    image: mongodb/mongodb-community-server:latest
    container_name: ${PROJECT_NAME:-Phoenicia-Digital}-Mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGODB_DATABASE}
    command: ["mongod", "--port", "${MONGODB_PORT:-27017}", "--quiet"]
    ports:
      - ${MONGODB_PORT:-27017}:${MONGODB_PORT:-27017}
    volumes:
      - Mongo-Data:/data/db # Defines a Named Volume Declared in Volumes
      - ./docker/.mongo/data:/data/db # Perists The Data From The Postgres Container -> ./docker/.postgres/data/
    networks:
      - Phoenicia-Digital-Backend-Network # Makes This Container Use An Isolated Network Bridge Communication For All the Container

  # Create the Redis Database Service Development
  # 
  # IN CASE YOU DONT NEED A Redis SERVICE COMMENT OUT THIS ENTIRE SERVICE! AND ITS DEPENDANCY `depends_on` IN go-backend
  phoenicia-digital-redis:
    image: redis/redis-stack:latest
    container_name: ${PROJECT_NAME:-Phoenicia-Digital}-Redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:${REDIS_PORT:-6379}"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}  # Passes the REDIS_PASSWORD environment variable to the container
      - REDIS_USER=${REDIS_USER:-default}  # Passes the REDIS_USER environment variable to the container (defaults to "default")
    command: ["redis-server", "--port", "${REDIS_PORT:-6379}", "--requirepass", "${REDIS_PASSWORD:-}", "--loadmodule /opt/redis-stack/lib/redisearch.so", "--loadmodule /opt/redis-stack/lib/rejson.so"]
    volumes:
      - Redis-Data:/data
      - ./docker/.redis/data:/data # Mounts the ./docker/.redis/data directory to /data in the container
    networks:
      - Phoenicia-Digital-Backend-Network

  # Create the go-backend Development Environment
  # 
  # DO NOT EDIT THIS UNLESS YOU KNOW WHAT YOU ARE DOING & HAVE A REASON FOR IT!
  phoenicia-digital-go-backend:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    container_name: ${PROJECT_NAME:-Phoenicia-Digital}-Backend
    restart: 'no'
    ports:
      - ${PORT}:${PORT} # Map the port of the local machine to the containers port for the backend service both use the PORT env variable from the ./config/.env file
    volumes:
      - ./source:/Backend/source # Mount the entire project directory for live reloading
      - ./sql:/Backend/sql # Mount the entire project directory for live reloading
      - ./config/.env:/Backend/config/.env # Mount the .env file
      - ./base/server/server.go:/Backend/base/server/server.go # Mount specific file
      - ./Phoenicia-Digital.log:/Backend/Phoenicia-Digital.log
    depends_on:
      - phoenicia-digital-postgres # Ensure the Postgres Database Service Starts Before the Backend
      - phoenicia-digital-redis # Ensures the Redis Database Service Starts Before the Backend
      - phoenicia-digital-mongo # Ensures the MongoDB Database Service Starts Before the Backend
    networks:
      - Phoenicia-Digital-Backend-Network # Makes This Container Use An Isolated Network Bridge Communication For All the Container


volumes:
  Postgres-Data: # Named Volume For Postgres Database - ./docker/.postgres/data/
  Redis-Data: # Named volume for Redis Data - ./docker/.redis/data
  Mongo-Data: # Named Volume For Mongo Database - ./docker/.mongo/data/


networks:
  Phoenicia-Digital-Backend-Network:
    name: ${PROJECT_NAME:-Phoenicia-Digital}-Backend-Network
    driver: bridge